{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"HyPyP \ud83d\udc0d\u3030\ufe0f\ud83d\udc0d The Hy perscanning Py thon P ipeline :warning: This alpha version is still far from easy-to-use and should be considered with caution. While we have done our best to test all the functionalities, there is no guarantee that the pipeline is entirely bug-free. \ud83d\udcd6 See our preprint for more explanation and our plan for upcoming functionalities (aka Roadmap). \ud83e\udd1d If you want to help you can submit bugs and suggestions of enhancements in our Github Issues section . \ud83e\udd13 For the motivated contributors, you can even help directly in the developpment of HyPyP. You will need to install Poetry (see section below). Contributors Florence BRUN, Ana\u00ebl AYROLLES, Phoebe CHEN, Amir DJALOVSKI, Yann BEAUXIS, Suzanne DIKKER, Guillaume DUMAS Installation pip install HyPyP Documentation HyPyP documentation of all the API functions is available online at hypyp.readthedocs.io For getting started with HyPyP, we have designed a little walkthrough: getting_started.ipynb API \ud83d\udee0 io.py \u2014 Loaders (Florence, Ana\u00ebl, Guillaume) \ud83e\uddf0 utils.py \u2014 Basic tools (Amir, Florence, Guilaume) \u2699\ufe0f prep.py \u2014 Preprocessing (ICA & AutoReject) (Ana\u00ebl, Florence, Guillaume) \ud83d\udd20 analyses.py \u2014 Power spectral density and wide choice of connectivity measures (Phoebe, Suzanne, Florence, Guillaume) \ud83d\udcc8 stats.py \u2014 Statistics (permutations & cluster statistics) (Florence, Guillaume) \ud83e\udde0 viz.py \u2014 Inter-brain visualization (Ana\u00ebl, Amir, Florence, Guillaume) \ud83c\udf93 Tutorials - Examples & documentation (Ana\u00ebl, Florence, Yann, Guillaume) Poetry installation (only for developpers) Step 1: pip install poetry Step 2: git clone git@github.com:ppsp-team/HyPyP.git Step 3: cd HyPyP Step 4: poetry install Step 5: poetry shell","title":"Home"},{"location":"#hypyp","text":"The Hy perscanning Py thon P ipeline :warning: This alpha version is still far from easy-to-use and should be considered with caution. While we have done our best to test all the functionalities, there is no guarantee that the pipeline is entirely bug-free. \ud83d\udcd6 See our preprint for more explanation and our plan for upcoming functionalities (aka Roadmap). \ud83e\udd1d If you want to help you can submit bugs and suggestions of enhancements in our Github Issues section . \ud83e\udd13 For the motivated contributors, you can even help directly in the developpment of HyPyP. You will need to install Poetry (see section below).","title":"HyPyP \ud83d\udc0d\u3030\ufe0f\ud83d\udc0d"},{"location":"#contributors","text":"Florence BRUN, Ana\u00ebl AYROLLES, Phoebe CHEN, Amir DJALOVSKI, Yann BEAUXIS, Suzanne DIKKER, Guillaume DUMAS","title":"Contributors"},{"location":"#installation","text":"pip install HyPyP","title":"Installation"},{"location":"#documentation","text":"HyPyP documentation of all the API functions is available online at hypyp.readthedocs.io For getting started with HyPyP, we have designed a little walkthrough: getting_started.ipynb","title":"Documentation"},{"location":"#api","text":"\ud83d\udee0 io.py \u2014 Loaders (Florence, Ana\u00ebl, Guillaume) \ud83e\uddf0 utils.py \u2014 Basic tools (Amir, Florence, Guilaume) \u2699\ufe0f prep.py \u2014 Preprocessing (ICA & AutoReject) (Ana\u00ebl, Florence, Guillaume) \ud83d\udd20 analyses.py \u2014 Power spectral density and wide choice of connectivity measures (Phoebe, Suzanne, Florence, Guillaume) \ud83d\udcc8 stats.py \u2014 Statistics (permutations & cluster statistics) (Florence, Guillaume) \ud83e\udde0 viz.py \u2014 Inter-brain visualization (Ana\u00ebl, Amir, Florence, Guillaume) \ud83c\udf93 Tutorials - Examples & documentation (Ana\u00ebl, Florence, Yann, Guillaume)","title":"API"},{"location":"#poetry-installation-only-for-developpers","text":"Step 1: pip install poetry Step 2: git clone git@github.com:ppsp-team/HyPyP.git Step 3: cd HyPyP Step 4: poetry install Step 5: poetry shell","title":"Poetry installation (only for developpers)"},{"location":"API/analyses/","text":"PSD, intra- and inter-brain measures functions Option Description title analyses.py authors Phoebe Chen, Florence Brun, Guillaume Dumas date 2020-03-18 behav_corr ( data , behav , data_name , behav_name , p_thresh , multiple_corr = True , verbose = False ) Correlates data with a discontinuous behavioral parameter, uses different linear correlations after checking for normality of the data. Parameters: Name Type Description Default data ndarray data to correlate with behavior. For now, inputs can be raw data or psd vectors for example (from n_dyads length), or con values without frequency dimension, numpy array of shape (n_dyads, n_channels, n_channels). required behav ndarray behavioral values for a parameter (ex: timing to control for learning), one dimensional array from same shape as data. required data_name str nature of the data (used for the legend of the figure, if verbose=True), str. required behav_name str nature of the behavior values (used for the legend of the figure, if verbose=True), str. required p_thresh float threshold to consider p values as significant for correlation tests, can be set to 0.05 with multiple_corr to True or lower when multiple_corr set to False, float. required multiple_corr bool for connectivity correlation tests for example, a correction for multiple comparison can be applied (multiple_corr set to True by default), bool. The method used is fdr_bh. True verbose bool option to plot the correlation, boolean. Set to False by default. False Returns: Type Description tuple r, pvalue, strat: - r: pearson\u2019s correlation coefficient, float if data is a vector, array of floats if data is an array of connectivity values. In this last case, the array can be used as input in viz.plot_links_2d. - pvalue: two-tailed p-value (probability of an uncorrelated system producing datasets that have a Pearson correlation at least as extreme as the one computed from the dataset tested), float if data is a vector, array of floats if data is an array of connectivity values. If multiple_corr is set to True, return corrected pvalue. - strat: normality of the datasets, 'non-normal' or 'normal' if data is a vector, corection set for multiple comparisons or not if data is an array of connectivity values, str. compute_freq_bands ( data , sampling_rate , freq_bands , ** filter_options ) Computes analytic signal per frequency band using FIR filtering and Hilbert transform. Parameters: Name Type Description Default data ndarray shape is (2, n_epochs, n_channels, n_times) real-valued data to compute analytic signal from. required sampling_rate int sampling rate. required freq_bands dict a dictionary specifying frequency band labels and corresponding frequency ranges e.g. {'alpha':[8,12],'beta':[12,20]} indicates that computations are performed over two frequency bands: 8-12 Hz for the alpha band and 12-20 Hz for the beta band. required **filter_options additional arguments for mne.filter.filter_data, such as filter_length, l_trans_bandwidth, h_trans_bandwidth {} Returns: Type Description ndarray complex_signal: array, shape is (2, n_epochs, n_channels, n_freq_bands, n_times) compute_single_freq ( data , sampling_rate , freq_range ) Computes analytic signal per frequency bin using the multitaper method. Parameters: Name Type Description Default data ndarray shape is (2, n_epochs, n_channels, n_times) real-valued data used to compute analytic signal. required sampling_rate int sampling rate. required freq_range list a list of two specifying the frequency range. e.g. [5,30] refers to every integer in the frequency bin from 5 Hz to 30 Hz. required Returns: Type Description ndarray complex_signal: shape is (2, n_epochs, n_channels, n_frequencies, n_times) compute_sync ( complex_signal , mode , epochs_average = True ) Computes frequency- or time-frequency-domain connectivity measures from analytic signals. Parameters: Name Type Description Default complex_signal ndarray shape = (2, n_epochs, n_channels, n_freq_bins, n_times). Analytic signals for computing connectivity between two participants. required mode str Connectivity measure. Options in the notes. required epochs_average bool option to either return the average connectivity across epochs (collapse across time) or preserve epoch-by-epoch connectivity, boolean. If False, PSD won't be averaged over epochs (the time course is maintained). If True, PSD values are averaged over epochs. True Returns: Type Description ndarray con: Connectivity matrix. The shape is either (n_freq, n_epochs, 2 n_channels, 2 n_channels) if time_resolved is False, or (n_freq, 2 n_channels, 2 n_channels) if time_resolved is True. To extract inter-brain connectivity values, slice the last two dimensions of con with [0:n_channels, n_channels: 2*n_channels]. Note supported connectivity measures - 'envelope_corr': envelope correlation - 'pow_corr': power correlation - 'plv': phase locking value - 'ccorr': circular correlation coefficient - 'coh': coherence - 'imaginary_coh': imaginary coherence indices_connectivity_interbrain ( epoch_hyper ) Computes indices for interbrain connectivity analyses between all EEG sensors for 2 participants (merge data). Parameters: Name Type Description Default epoch_hyper Epochs a pair's Epochs object; contains channel information (Epochs are MNE objects). required Returns: Type Description list channels: channel pairs for which connectivity indices will be computed, a list of tuples with channels indices. indices_connectivity_intrabrain ( epochs ) Computes indices for connectivity analysis between all EEG channels for one participant. Can be used instead of (n_channels, n_channels) that takes into account intrabrain channel connectivity. Parameters: Name Type Description Default epochs Epochs one participant's Epochs object, to retrieve channel information. (Epochs are MNE objects). required Returns: Type Description list channels: channel pairs for which connectivity indices will be computed, a list of tuples with channels indices. pair_connectivity ( data , sampling_rate , frequencies , mode , epochs_average = True ) Computes frequency- or time-frequency-domain connectivity measures from preprocessed EEG data. This function aggregates compute_single_freq/compute_freq_bands and compute_sync. Parameters: Name Type Description Default data Union[list, numpy.ndarray] shape = (2, n_epochs, n_channels, n_times). data input for computing connectivity between two participants required sampling_rate int sampling rate. required frequencies Union[dict, list] frequencies of interest for which connectivity will be computed. If a dictionary, different frequency bands are used. - e.g. {'alpha':[8,12],'beta':[12,20]} If a list, every integer frequency within the range is used. - e.g. [5,30] dictates that connectivity will be computed over every integer in the frequency bin between 5 Hz and 30 Hz. required mode str connectivity measure. Options are in the notes. required epochs_average bool option to either return the average connectivity across epochs (collapse across time) or preserve epoch-by-epoch connectivity, boolean. If False, PSD won't be averaged over epochs (the time course is maintained). If True, PSD values are averaged over epochs. True Returns: Type Description ndarray result: Connectivity matrix. The shape is either (n_freq, n_epochs, 2 n_channels, 2 n_channels) if time_resolved is False, or (n_freq, 2 n_channels, 2 n_channels) if time_resolved is True. To extract inter-brain connectivity values, slice the last two dimensions of con with [0:n_channels, n_channels: 2*n_channels]. Note Connectivity is computed for all possible electrode pairs between the dyad, including inter- and intra-brain connectivities. supported connectivity measures - 'envelope_corr': envelope correlation - 'pow_corr': power correlation - 'plv': phase locking value - 'ccorr': circular correlation coefficient - 'coh': coherence - 'imaginary_coh': imaginary coherence pow ( epochs , fmin , fmax , n_fft , n_per_seg , epochs_average ) Computes the Power Spectral Density (PSD) on Epochs. Parameters: Name Type Description Default epochs Epochs A participant's Epochs object, for a condition (can result from the concatenation of Epochs from different files with the same condition). Epochs are MNE objects: data are stored in arrays of shape (n_epochs, n_channels, n_times) and parameter information is stored in a dictionary. required fmin, fmax minimum and maximum frequencies of interest for PSD calculation, floats in Hz. required n_fft int The length of FFT used, must be >= n_per_seg (default: 256). The segments will be zero-padded if n_fft > n_per_seg . If n_per_seg is None, n_fft must be <= number of time points in the data. required n_per_seg int int | None Length of each Welch segment (windowed with a Hamming window). Defaults to None, which sets n_per_seg equal to n_fft. required epochs_average bool option to collapse the time course or not, boolean. If False, PSD won't be averaged over epochs (the time course is maintained). If True, PSD values are averaged over epochs. required Note The function can be iterated on the group and/or on conditions (for epochs in epochs['epochs_%s_%s_%s' % (subj, group, cond_name)]). The PSD distribution on the group can be visualized to check normality for statistics. Returns: Type Description tuple freq_list, psd: freq_list: list of frequencies in the actual frequency band of interest (frequency bin) used for PSD calculation. psd: PSD value for each epoch, each channel, and each frequency, ndarray (n_epochs, n_channels, n_frequencies). Note that if time_resolved == True, PSD values are averaged across epochs.","title":"Analyses"},{"location":"API/analyses/#hypyp.analyses","text":"PSD, intra- and inter-brain measures functions Option Description title analyses.py authors Phoebe Chen, Florence Brun, Guillaume Dumas date 2020-03-18","title":"hypyp.analyses"},{"location":"API/analyses/#hypyp.analyses.behav_corr","text":"Correlates data with a discontinuous behavioral parameter, uses different linear correlations after checking for normality of the data. Parameters: Name Type Description Default data ndarray data to correlate with behavior. For now, inputs can be raw data or psd vectors for example (from n_dyads length), or con values without frequency dimension, numpy array of shape (n_dyads, n_channels, n_channels). required behav ndarray behavioral values for a parameter (ex: timing to control for learning), one dimensional array from same shape as data. required data_name str nature of the data (used for the legend of the figure, if verbose=True), str. required behav_name str nature of the behavior values (used for the legend of the figure, if verbose=True), str. required p_thresh float threshold to consider p values as significant for correlation tests, can be set to 0.05 with multiple_corr to True or lower when multiple_corr set to False, float. required multiple_corr bool for connectivity correlation tests for example, a correction for multiple comparison can be applied (multiple_corr set to True by default), bool. The method used is fdr_bh. True verbose bool option to plot the correlation, boolean. Set to False by default. False Returns: Type Description tuple r, pvalue, strat: - r: pearson\u2019s correlation coefficient, float if data is a vector, array of floats if data is an array of connectivity values. In this last case, the array can be used as input in viz.plot_links_2d. - pvalue: two-tailed p-value (probability of an uncorrelated system producing datasets that have a Pearson correlation at least as extreme as the one computed from the dataset tested), float if data is a vector, array of floats if data is an array of connectivity values. If multiple_corr is set to True, return corrected pvalue. - strat: normality of the datasets, 'non-normal' or 'normal' if data is a vector, corection set for multiple comparisons or not if data is an array of connectivity values, str.","title":"behav_corr()"},{"location":"API/analyses/#hypyp.analyses.compute_freq_bands","text":"Computes analytic signal per frequency band using FIR filtering and Hilbert transform. Parameters: Name Type Description Default data ndarray shape is (2, n_epochs, n_channels, n_times) real-valued data to compute analytic signal from. required sampling_rate int sampling rate. required freq_bands dict a dictionary specifying frequency band labels and corresponding frequency ranges e.g. {'alpha':[8,12],'beta':[12,20]} indicates that computations are performed over two frequency bands: 8-12 Hz for the alpha band and 12-20 Hz for the beta band. required **filter_options additional arguments for mne.filter.filter_data, such as filter_length, l_trans_bandwidth, h_trans_bandwidth {} Returns: Type Description ndarray complex_signal: array, shape is (2, n_epochs, n_channels, n_freq_bands, n_times)","title":"compute_freq_bands()"},{"location":"API/analyses/#hypyp.analyses.compute_single_freq","text":"Computes analytic signal per frequency bin using the multitaper method. Parameters: Name Type Description Default data ndarray shape is (2, n_epochs, n_channels, n_times) real-valued data used to compute analytic signal. required sampling_rate int sampling rate. required freq_range list a list of two specifying the frequency range. e.g. [5,30] refers to every integer in the frequency bin from 5 Hz to 30 Hz. required Returns: Type Description ndarray complex_signal: shape is (2, n_epochs, n_channels, n_frequencies, n_times)","title":"compute_single_freq()"},{"location":"API/analyses/#hypyp.analyses.compute_sync","text":"Computes frequency- or time-frequency-domain connectivity measures from analytic signals. Parameters: Name Type Description Default complex_signal ndarray shape = (2, n_epochs, n_channels, n_freq_bins, n_times). Analytic signals for computing connectivity between two participants. required mode str Connectivity measure. Options in the notes. required epochs_average bool option to either return the average connectivity across epochs (collapse across time) or preserve epoch-by-epoch connectivity, boolean. If False, PSD won't be averaged over epochs (the time course is maintained). If True, PSD values are averaged over epochs. True Returns: Type Description ndarray con: Connectivity matrix. The shape is either (n_freq, n_epochs, 2 n_channels, 2 n_channels) if time_resolved is False, or (n_freq, 2 n_channels, 2 n_channels) if time_resolved is True. To extract inter-brain connectivity values, slice the last two dimensions of con with [0:n_channels, n_channels: 2*n_channels]. Note supported connectivity measures - 'envelope_corr': envelope correlation - 'pow_corr': power correlation - 'plv': phase locking value - 'ccorr': circular correlation coefficient - 'coh': coherence - 'imaginary_coh': imaginary coherence","title":"compute_sync()"},{"location":"API/analyses/#hypyp.analyses.indices_connectivity_interbrain","text":"Computes indices for interbrain connectivity analyses between all EEG sensors for 2 participants (merge data). Parameters: Name Type Description Default epoch_hyper Epochs a pair's Epochs object; contains channel information (Epochs are MNE objects). required Returns: Type Description list channels: channel pairs for which connectivity indices will be computed, a list of tuples with channels indices.","title":"indices_connectivity_interbrain()"},{"location":"API/analyses/#hypyp.analyses.indices_connectivity_intrabrain","text":"Computes indices for connectivity analysis between all EEG channels for one participant. Can be used instead of (n_channels, n_channels) that takes into account intrabrain channel connectivity. Parameters: Name Type Description Default epochs Epochs one participant's Epochs object, to retrieve channel information. (Epochs are MNE objects). required Returns: Type Description list channels: channel pairs for which connectivity indices will be computed, a list of tuples with channels indices.","title":"indices_connectivity_intrabrain()"},{"location":"API/analyses/#hypyp.analyses.pair_connectivity","text":"Computes frequency- or time-frequency-domain connectivity measures from preprocessed EEG data. This function aggregates compute_single_freq/compute_freq_bands and compute_sync. Parameters: Name Type Description Default data Union[list, numpy.ndarray] shape = (2, n_epochs, n_channels, n_times). data input for computing connectivity between two participants required sampling_rate int sampling rate. required frequencies Union[dict, list] frequencies of interest for which connectivity will be computed. If a dictionary, different frequency bands are used. - e.g. {'alpha':[8,12],'beta':[12,20]} If a list, every integer frequency within the range is used. - e.g. [5,30] dictates that connectivity will be computed over every integer in the frequency bin between 5 Hz and 30 Hz. required mode str connectivity measure. Options are in the notes. required epochs_average bool option to either return the average connectivity across epochs (collapse across time) or preserve epoch-by-epoch connectivity, boolean. If False, PSD won't be averaged over epochs (the time course is maintained). If True, PSD values are averaged over epochs. True Returns: Type Description ndarray result: Connectivity matrix. The shape is either (n_freq, n_epochs, 2 n_channels, 2 n_channels) if time_resolved is False, or (n_freq, 2 n_channels, 2 n_channels) if time_resolved is True. To extract inter-brain connectivity values, slice the last two dimensions of con with [0:n_channels, n_channels: 2*n_channels]. Note Connectivity is computed for all possible electrode pairs between the dyad, including inter- and intra-brain connectivities. supported connectivity measures - 'envelope_corr': envelope correlation - 'pow_corr': power correlation - 'plv': phase locking value - 'ccorr': circular correlation coefficient - 'coh': coherence - 'imaginary_coh': imaginary coherence","title":"pair_connectivity()"},{"location":"API/analyses/#hypyp.analyses.pow","text":"Computes the Power Spectral Density (PSD) on Epochs. Parameters: Name Type Description Default epochs Epochs A participant's Epochs object, for a condition (can result from the concatenation of Epochs from different files with the same condition). Epochs are MNE objects: data are stored in arrays of shape (n_epochs, n_channels, n_times) and parameter information is stored in a dictionary. required fmin, fmax minimum and maximum frequencies of interest for PSD calculation, floats in Hz. required n_fft int The length of FFT used, must be >= n_per_seg (default: 256). The segments will be zero-padded if n_fft > n_per_seg . If n_per_seg is None, n_fft must be <= number of time points in the data. required n_per_seg int int | None Length of each Welch segment (windowed with a Hamming window). Defaults to None, which sets n_per_seg equal to n_fft. required epochs_average bool option to collapse the time course or not, boolean. If False, PSD won't be averaged over epochs (the time course is maintained). If True, PSD values are averaged over epochs. required Note The function can be iterated on the group and/or on conditions (for epochs in epochs['epochs_%s_%s_%s' % (subj, group, cond_name)]). The PSD distribution on the group can be visualized to check normality for statistics. Returns: Type Description tuple freq_list, psd: freq_list: list of frequencies in the actual frequency band of interest (frequency bin) used for PSD calculation. psd: PSD value for each epoch, each channel, and each frequency, ndarray (n_epochs, n_channels, n_frequencies). Note that if time_resolved == True, PSD values are averaged across epochs.","title":"pow()"},{"location":"API/preprocessing/","text":"Data preprocessing functions Option Description title prep.py authors Ana\u00ebl Ayrolles, Florence Brun, Guillaume Dumas date 2020-03-18 AR_local ( cleaned_epochs_ICA , strategy = 'union' , threshold = 50.0 , verbose = False ) Applies local Autoreject to repair or reject bad epochs. Parameters: Name Type Description Default clean_epochs_ICA list of Epochs after global Autoreject and ICA. required strategy str more or less generous strategy to reject bad epochs: 'union' or 'intersection'. 'union' rejects bad epochs from subject 1 and subject 2 immediatly, whereas 'intersection' rejects shared bad epochs between subjects, tries to repare remaining bad epochs per subject, reject the non-reparable per subject and finally equalize epochs number between subjects. Set to 'union' by default. 'union' threshold float percentage of epochs removed that is accepted. Above this threshold, data are considered as a too shortened sample for further analyses. Set to 50.0 by default. 50.0 verbose bool option to plot data before and after AR, boolean, set to False by default. # use verbose = false until next Autoreject update False Note To reject or repair epochs, parameters are more or less conservative, see http://autoreject.github.io/generated/autoreject.AutoReject. Returns: Type Description list cleaned_epochs_AR: list of Epochs after local Autoreject. dic_AR: dictionnary with the percentage of epochs rejection for each subject and for the intersection of the them. filt ( raw_S ) Filters list of raw data to remove slow drifts. Parameters: Name Type Description Default raw_S list list of Raw data (as an example: different occurences of a condition for a participant). Raws are MNE objects. required Returns: Type Description list raws: list of high-pass filtered raws. ICA_apply ( icas , subj_number , comp_number , epochs ) Applies ICA with template model from 1 participant in the dyad. See ICA_choice_comp for a detailed description of the parameters and output. ICA_choice_comp ( icas , epochs ) Plots Independent Components for each participant (calculated from Epochs), let the user choose the relevant components for artifact rejection and apply ICA on Epochs. Parameters: Name Type Description Default icas list list of Independent Components for each participant (IC are MNE objects). required epochs list list of 2 Epochs objects (for each participant). Epochs_S1 and Epochs_S2 correspond to a condition and can result from the concatenation of Epochs from different experimental realisations of the condition. Epochs are MNE objects: data are stored in an array of shape (n_epochs, n_channels, n_times) and parameters information is stored in a disctionnary. required Returns: Type Description list cleaned_epochs_ICA: list of 2 cleaned Epochs for each participant (the chosen IC have been removed from the signal). ICA_fit ( epochs , n_components , method , fit_params , random_state ) Computes global Autorejection to fit Independent Components Analysis on Epochs, for each participant. Pre requisite : install autoreject https://api.github.com/repos/autoreject/autoreject/zipball/master Parameters: Name Type Description Default epochs list list of 2 Epochs objects (for each participant). Epochs_S1 and Epochs_S2 correspond to a condition and can result from the concatenation of Epochs from different experimental realisations of the condition (Epochs are MNE objects). required n_components int the number of principal components that are passed to the ICA algorithm during fitting, int. For a first estimation, n_components can be set to 15. required method str the ICA method used, str 'fastica', 'infomax' or 'picard'. 'Fastica' is the most frequently used. Use the fit_params argument to set additional parameters. Specifically, if you want Extended Infomax, set method=\u2019infomax\u2019 and fit_params=dict(extended=True) (this also works for method=\u2019picard\u2019). required fit_params dict Additional parameters passed to the ICA estimator as specified by method. None by default. required random_state int the parameter used to compute random distributions for ICA calulation, int or None. It can be useful to fix random_state value to have reproducible results. For 15 components, random_state can be set to 97, for 20 components to 0 for example. required Note If Autoreject and ICA take too much time, change the decim value (see MNE documentation). Please filter the Epochs between 2 and 30 Hz before ICA fit (mne.Epochs.filter(epoch, 2, 30, method='fir')). Returns: Type Description list icas: list of Independant Components for each participant (IC are MNE objects, see MNE documentation for more details).","title":"Preprocessing"},{"location":"API/preprocessing/#hypyp.prep","text":"Data preprocessing functions Option Description title prep.py authors Ana\u00ebl Ayrolles, Florence Brun, Guillaume Dumas date 2020-03-18","title":"hypyp.prep"},{"location":"API/preprocessing/#hypyp.prep.AR_local","text":"Applies local Autoreject to repair or reject bad epochs. Parameters: Name Type Description Default clean_epochs_ICA list of Epochs after global Autoreject and ICA. required strategy str more or less generous strategy to reject bad epochs: 'union' or 'intersection'. 'union' rejects bad epochs from subject 1 and subject 2 immediatly, whereas 'intersection' rejects shared bad epochs between subjects, tries to repare remaining bad epochs per subject, reject the non-reparable per subject and finally equalize epochs number between subjects. Set to 'union' by default. 'union' threshold float percentage of epochs removed that is accepted. Above this threshold, data are considered as a too shortened sample for further analyses. Set to 50.0 by default. 50.0 verbose bool option to plot data before and after AR, boolean, set to False by default. # use verbose = false until next Autoreject update False Note To reject or repair epochs, parameters are more or less conservative, see http://autoreject.github.io/generated/autoreject.AutoReject. Returns: Type Description list cleaned_epochs_AR: list of Epochs after local Autoreject. dic_AR: dictionnary with the percentage of epochs rejection for each subject and for the intersection of the them.","title":"AR_local()"},{"location":"API/preprocessing/#hypyp.prep.filt","text":"Filters list of raw data to remove slow drifts. Parameters: Name Type Description Default raw_S list list of Raw data (as an example: different occurences of a condition for a participant). Raws are MNE objects. required Returns: Type Description list raws: list of high-pass filtered raws.","title":"filt()"},{"location":"API/preprocessing/#hypyp.prep.ICA_apply","text":"Applies ICA with template model from 1 participant in the dyad. See ICA_choice_comp for a detailed description of the parameters and output.","title":"ICA_apply()"},{"location":"API/preprocessing/#hypyp.prep.ICA_choice_comp","text":"Plots Independent Components for each participant (calculated from Epochs), let the user choose the relevant components for artifact rejection and apply ICA on Epochs. Parameters: Name Type Description Default icas list list of Independent Components for each participant (IC are MNE objects). required epochs list list of 2 Epochs objects (for each participant). Epochs_S1 and Epochs_S2 correspond to a condition and can result from the concatenation of Epochs from different experimental realisations of the condition. Epochs are MNE objects: data are stored in an array of shape (n_epochs, n_channels, n_times) and parameters information is stored in a disctionnary. required Returns: Type Description list cleaned_epochs_ICA: list of 2 cleaned Epochs for each participant (the chosen IC have been removed from the signal).","title":"ICA_choice_comp()"},{"location":"API/preprocessing/#hypyp.prep.ICA_fit","text":"Computes global Autorejection to fit Independent Components Analysis on Epochs, for each participant. Pre requisite : install autoreject https://api.github.com/repos/autoreject/autoreject/zipball/master Parameters: Name Type Description Default epochs list list of 2 Epochs objects (for each participant). Epochs_S1 and Epochs_S2 correspond to a condition and can result from the concatenation of Epochs from different experimental realisations of the condition (Epochs are MNE objects). required n_components int the number of principal components that are passed to the ICA algorithm during fitting, int. For a first estimation, n_components can be set to 15. required method str the ICA method used, str 'fastica', 'infomax' or 'picard'. 'Fastica' is the most frequently used. Use the fit_params argument to set additional parameters. Specifically, if you want Extended Infomax, set method=\u2019infomax\u2019 and fit_params=dict(extended=True) (this also works for method=\u2019picard\u2019). required fit_params dict Additional parameters passed to the ICA estimator as specified by method. None by default. required random_state int the parameter used to compute random distributions for ICA calulation, int or None. It can be useful to fix random_state value to have reproducible results. For 15 components, random_state can be set to 97, for 20 components to 0 for example. required Note If Autoreject and ICA take too much time, change the decim value (see MNE documentation). Please filter the Epochs between 2 and 30 Hz before ICA fit (mne.Epochs.filter(epoch, 2, 30, method='fir')). Returns: Type Description list icas: list of Independant Components for each participant (IC are MNE objects, see MNE documentation for more details).","title":"ICA_fit()"},{"location":"API/statistics/","text":"Statistical functions Option Description title stats.py authors Florence Brun, Guillaume Dumas date 2020-03-18 con_matrix ( epochs , freqs_mean , draw = False ) Computes a priori channel connectivity across space and frequencies. Parameters: Name Type Description Default epochs Epochs one participant Epochs object; contains channel information. required freqs_mean list list of frequencies in frequency-band-of-interest used by MNE for power or coherence spectral density calculation. required draw bool option to plot the connectivity matrices, boolean. False Returns: Type Description tuple ch_con, ch_con_freq: ch_con: connectivity matrix between channels along space based on their position, scipy.sparse.csr_matrix of shape (n_channels, n_channels). ch_con_freq: connectivity matrix between channels along space and frequencies, scipy.sparse.csr_matrix of shape (n_channels len(freqs_mean), n_channels len(freqs_mean)). metaconn_matrix ( electrodes , ch_con , freqs_mean ) Computes a priori connectivity between pairs of sensors for which connectivity indices have been calculated, across space and frequencies (based on channel location). Parameters: Name Type Description Default electrodes list electrode pairs for which connectivity has been computed, list of tuples with channel indices, see indices_connectivity intrabrain function in toolbox (analyses). required ch_con csr_matrix connectivity matrix between sensors along space based on their position, scipy.sparse.csr_matrix of shape (n_channels, n_channels). required freqs_mean list list of frequencies in the frequency-band-of-interest used by MNE for coherence spectral density calculation (connectivity indices). required Returns: Type Description tuple metaconn, metaconn_freq: metaconn: a priori connectivity based on channel location, between pairs of channels for which connectivity indices have been calculated, matrix of shape (len(electrodes), len(electrodes)). metaconn_freq: a priori connectivity between pairs of channels for which connectivity indices have been calculated, across space and frequencies, for merge data, matrix of shape (len(electrodes) len(freqs_mean), len(electrodes) len(freqs_mean)). metaconn_matrix_2brains ( electrodes , ch_con , freqs_mean , plot = False ) Computes a priori connectivity across space and frequencies between pairs of channels for which connectivity indices have been calculated, to merge data (2 brains). Parameters: Name Type Description Default electrodes list electrode pairs for which connectivity indices have been computed, list of tuples with channels indexes, see indices_connectivity_interbrain function in toolbox (analyses). required ch_con csr_matrix connectivity matrix between channels along space based on their position, scipy.sparse.csr_matrix of shape (n_channels, n_channels). required freqs_mean list list of frequencies in the frequency-band-of-interest used by MNE for coherence spectral density calculation (connectivity indices). required plot bool option to plot the connectivity matrices, boolean. False Note It is assumed that there was no a priori connectivity between channels from the two participants. Returns: Type Description tuple metaconn, metaconn_freq: metaconn: a priori connectivity based on channel location, between pairs of channels for which connectivity indices have been calculated, to merge data, matrix of shape (len(electrodes), len(electrodes)). metaconn_freq: a priori connectivity between pairs of channels for which connectivity indices have been calculated, across space and frequencies, to merge data, matrix of shape (len(electrodes) len(freqs_mean), len(electrodes) len(freqs_mean)). statscluster ( data , test , factor_level , ch_con_freq , tail , n_permutations , alpha = 0.05 ) Computes cluster-level statistical permutation test, corrected with channel connectivity across space and frequencies to compare groups or conditions for simple or multiple comparisons. Parameters: Name Type Description Default data list values from different groups or conditions to compare, list of arrays (3d for time-frequency power or connectivity values), or np.array for f multiple-way ANOVA test. For this test and the paired ttest, samples must have the same dimension. required test str nature of the test used to compare groups or conditions. Can be a t test for independant or paired samples ('ind ttest' or 'rel ttest'), a one-way ANOVA test ('f oneway'), or a multiple-way ANOVA test ('f multipleway), str. required factor_level list for multiple-way ANOVA test, describe the number of level for each factor, list (if compare 2 groups and 2 conditions, factor_levels = [2, 2] and data should be an np.array with group1-condition1, group1-condition2, group2-condition1, group2-condition2). Set to None otherwise. required ch_con_freq csr_matrix connectivity or metaconnectivity matrix for PSD or CSD values to assess a priori connectivity between channels across space and frequencies based on their position, bsr_matrix. required tail int direction of the ttest, can be set to 1, 0 or -1. The tail must be set to 0 for a one-way ANOVA test and to 1 for a mutiple-way ANOVA test. required n_permutations int number of permutations computed, can be set to 50000. required alpha float threshold to consider clusters significant, can be set to 0.05 that is the default value. An adjustment is done for a f one-way and multiple-way tests to adapt 0.05 to the number of observations. 0.05 Notes With t_power set to 1, each location is weighted by its statistical score in a cluster. For a f multipleway ANOVA test with connectivity values, the last dimensions have to be flattened in a vector, instead of the shape (n_sensors, n_sensors), you can use np.reshape. Returns: Type Description tuple F_obs, clusters, cluster_pv, H0, F_obs_plot: F_obs: statistic (T or F values according to the assignement of 'test') observed for all variables, array of shape (n_tests,). clusters: boolean array with same shape as the input data, True values indicating locations that are part of a cluster, array. cluster_p_values: p-value for each cluster, array. H0: max cluster level stats observed under permutation, array of shape (n_permutations,). F_obs_plot: statistical values above alpha threshold, to plot significant sensors (see plot_significant_sensors function in the toolbox) array of shape (n_tests,). statsCond ( data , epochs , n_permutations , alpha ) Computes statistical t test on participant measure (e.g. PSD) for a condition. Parameters: Name Type Description Default data ndarray array of participants measure (e.g. PSD) for a condition (n_samples, n_tests, nfreq: n_tests the channels). Values will be averaged on nfreq for statistics. required epochs Epochs Epochs object for a condition from a random participant, only used to get parameters from the info (sampling frequencies for example). required n_permutations int the number of permutations, int. Should be at least 2*n sample, can be set to 50000 for example. required alpha float the threshold for ttest, float, can be set to 0.05. required Note This ttest calculates if the observed mean significantly deviates from 0; it does not compare two periods, but one period with the null hypothesis. Randomized data are generated with random sign flips. The tail is set to 0 by default (= the alternative hypothesis is that the data mean is different from 0). To reduce false positive due to multiple comparisons, False Discovery Rate (FDR) correction is applied to the p values. Note that the frequency dimension is reduced to one for the test (average in the frequency band-of-interest). To take frequencies into account, use cluster statistics (see statscondCluster function in the toolbox). For visualization, use plot_significant_sensors function in the toolbox. Returns: Type Description tuple T_obs, p_values, H0, adj_p, T_obs_plot: - T_obs: T-statistic observed for all variables, array of shape (n_tests). p_values: p-values for all the tests, array of shape (n_tests). H0: T-statistic obtained by permutations and t-max trick for multiple comparisons, array of shape (n_permutations). adj_p: adjusted p values from FDR correction, array of shape (n_tests, n_tests), with boolean assessment for p values and p values corrected. T_obs_plot: statistical values to plot, from sensors above alpha threshold, array of shape (n_tests,). statscondCluster ( data , freqs_mean , ch_con_freq , tail , n_permutations , alpha ) Computes cluster-level statistical permutation test, corrected with channel connectivity across space and frequencies. Parameters: Name Type Description Default data list values from different conditions or different groups to compare, list of arrays (3d for time-frequency power or connectivity values). required freqs_mean list frequencies in frequency-band-of-interest used by MNE for PSD or CSD calculation, list. required ch_con_freq csr_matrix connectivity or metaconnectivity matrix for PSD or CSD values to assess a priori connectivity between channels across space and frequencies based on their position, bsr_matrix. required tail int direction of the ttest, can be set to 1, 0 or -1. required n_permutations int number of permutations computed, can be set to 50000. required alpha float threshold to consider clusters significant, can be set to 0.05 or less. required Returns: Type Description tuple F_obs, clusters, cluster_pv, H0, F_obs_plot: F_obs: statistic (F by default) observed for all variables, array of shape (n_tests,). clusters: boolean array with same shape as the input data, True values indicating locations that are part of a cluster, array. cluster_p_values: p-value for each cluster, array. H0: max cluster level stats observed under permutation, array of shape (n_permutations,). F_obs_plot: statistical values above alpha threshold, to plot significant sensors (see plot_significant_sensors function in the toolbox) array of shape (n_tests,).","title":"Statistics"},{"location":"API/statistics/#hypyp.stats","text":"Statistical functions Option Description title stats.py authors Florence Brun, Guillaume Dumas date 2020-03-18","title":"hypyp.stats"},{"location":"API/statistics/#hypyp.stats.con_matrix","text":"Computes a priori channel connectivity across space and frequencies. Parameters: Name Type Description Default epochs Epochs one participant Epochs object; contains channel information. required freqs_mean list list of frequencies in frequency-band-of-interest used by MNE for power or coherence spectral density calculation. required draw bool option to plot the connectivity matrices, boolean. False Returns: Type Description tuple ch_con, ch_con_freq: ch_con: connectivity matrix between channels along space based on their position, scipy.sparse.csr_matrix of shape (n_channels, n_channels). ch_con_freq: connectivity matrix between channels along space and frequencies, scipy.sparse.csr_matrix of shape (n_channels len(freqs_mean), n_channels len(freqs_mean)).","title":"con_matrix()"},{"location":"API/statistics/#hypyp.stats.metaconn_matrix","text":"Computes a priori connectivity between pairs of sensors for which connectivity indices have been calculated, across space and frequencies (based on channel location). Parameters: Name Type Description Default electrodes list electrode pairs for which connectivity has been computed, list of tuples with channel indices, see indices_connectivity intrabrain function in toolbox (analyses). required ch_con csr_matrix connectivity matrix between sensors along space based on their position, scipy.sparse.csr_matrix of shape (n_channels, n_channels). required freqs_mean list list of frequencies in the frequency-band-of-interest used by MNE for coherence spectral density calculation (connectivity indices). required Returns: Type Description tuple metaconn, metaconn_freq: metaconn: a priori connectivity based on channel location, between pairs of channels for which connectivity indices have been calculated, matrix of shape (len(electrodes), len(electrodes)). metaconn_freq: a priori connectivity between pairs of channels for which connectivity indices have been calculated, across space and frequencies, for merge data, matrix of shape (len(electrodes) len(freqs_mean), len(electrodes) len(freqs_mean)).","title":"metaconn_matrix()"},{"location":"API/statistics/#hypyp.stats.metaconn_matrix_2brains","text":"Computes a priori connectivity across space and frequencies between pairs of channels for which connectivity indices have been calculated, to merge data (2 brains). Parameters: Name Type Description Default electrodes list electrode pairs for which connectivity indices have been computed, list of tuples with channels indexes, see indices_connectivity_interbrain function in toolbox (analyses). required ch_con csr_matrix connectivity matrix between channels along space based on their position, scipy.sparse.csr_matrix of shape (n_channels, n_channels). required freqs_mean list list of frequencies in the frequency-band-of-interest used by MNE for coherence spectral density calculation (connectivity indices). required plot bool option to plot the connectivity matrices, boolean. False Note It is assumed that there was no a priori connectivity between channels from the two participants. Returns: Type Description tuple metaconn, metaconn_freq: metaconn: a priori connectivity based on channel location, between pairs of channels for which connectivity indices have been calculated, to merge data, matrix of shape (len(electrodes), len(electrodes)). metaconn_freq: a priori connectivity between pairs of channels for which connectivity indices have been calculated, across space and frequencies, to merge data, matrix of shape (len(electrodes) len(freqs_mean), len(electrodes) len(freqs_mean)).","title":"metaconn_matrix_2brains()"},{"location":"API/statistics/#hypyp.stats.statscluster","text":"Computes cluster-level statistical permutation test, corrected with channel connectivity across space and frequencies to compare groups or conditions for simple or multiple comparisons. Parameters: Name Type Description Default data list values from different groups or conditions to compare, list of arrays (3d for time-frequency power or connectivity values), or np.array for f multiple-way ANOVA test. For this test and the paired ttest, samples must have the same dimension. required test str nature of the test used to compare groups or conditions. Can be a t test for independant or paired samples ('ind ttest' or 'rel ttest'), a one-way ANOVA test ('f oneway'), or a multiple-way ANOVA test ('f multipleway), str. required factor_level list for multiple-way ANOVA test, describe the number of level for each factor, list (if compare 2 groups and 2 conditions, factor_levels = [2, 2] and data should be an np.array with group1-condition1, group1-condition2, group2-condition1, group2-condition2). Set to None otherwise. required ch_con_freq csr_matrix connectivity or metaconnectivity matrix for PSD or CSD values to assess a priori connectivity between channels across space and frequencies based on their position, bsr_matrix. required tail int direction of the ttest, can be set to 1, 0 or -1. The tail must be set to 0 for a one-way ANOVA test and to 1 for a mutiple-way ANOVA test. required n_permutations int number of permutations computed, can be set to 50000. required alpha float threshold to consider clusters significant, can be set to 0.05 that is the default value. An adjustment is done for a f one-way and multiple-way tests to adapt 0.05 to the number of observations. 0.05 Notes With t_power set to 1, each location is weighted by its statistical score in a cluster. For a f multipleway ANOVA test with connectivity values, the last dimensions have to be flattened in a vector, instead of the shape (n_sensors, n_sensors), you can use np.reshape. Returns: Type Description tuple F_obs, clusters, cluster_pv, H0, F_obs_plot: F_obs: statistic (T or F values according to the assignement of 'test') observed for all variables, array of shape (n_tests,). clusters: boolean array with same shape as the input data, True values indicating locations that are part of a cluster, array. cluster_p_values: p-value for each cluster, array. H0: max cluster level stats observed under permutation, array of shape (n_permutations,). F_obs_plot: statistical values above alpha threshold, to plot significant sensors (see plot_significant_sensors function in the toolbox) array of shape (n_tests,).","title":"statscluster()"},{"location":"API/statistics/#hypyp.stats.statsCond","text":"Computes statistical t test on participant measure (e.g. PSD) for a condition. Parameters: Name Type Description Default data ndarray array of participants measure (e.g. PSD) for a condition (n_samples, n_tests, nfreq: n_tests the channels). Values will be averaged on nfreq for statistics. required epochs Epochs Epochs object for a condition from a random participant, only used to get parameters from the info (sampling frequencies for example). required n_permutations int the number of permutations, int. Should be at least 2*n sample, can be set to 50000 for example. required alpha float the threshold for ttest, float, can be set to 0.05. required Note This ttest calculates if the observed mean significantly deviates from 0; it does not compare two periods, but one period with the null hypothesis. Randomized data are generated with random sign flips. The tail is set to 0 by default (= the alternative hypothesis is that the data mean is different from 0). To reduce false positive due to multiple comparisons, False Discovery Rate (FDR) correction is applied to the p values. Note that the frequency dimension is reduced to one for the test (average in the frequency band-of-interest). To take frequencies into account, use cluster statistics (see statscondCluster function in the toolbox). For visualization, use plot_significant_sensors function in the toolbox. Returns: Type Description tuple T_obs, p_values, H0, adj_p, T_obs_plot: - T_obs: T-statistic observed for all variables, array of shape (n_tests). p_values: p-values for all the tests, array of shape (n_tests). H0: T-statistic obtained by permutations and t-max trick for multiple comparisons, array of shape (n_permutations). adj_p: adjusted p values from FDR correction, array of shape (n_tests, n_tests), with boolean assessment for p values and p values corrected. T_obs_plot: statistical values to plot, from sensors above alpha threshold, array of shape (n_tests,).","title":"statsCond()"},{"location":"API/statistics/#hypyp.stats.statscondCluster","text":"Computes cluster-level statistical permutation test, corrected with channel connectivity across space and frequencies. Parameters: Name Type Description Default data list values from different conditions or different groups to compare, list of arrays (3d for time-frequency power or connectivity values). required freqs_mean list frequencies in frequency-band-of-interest used by MNE for PSD or CSD calculation, list. required ch_con_freq csr_matrix connectivity or metaconnectivity matrix for PSD or CSD values to assess a priori connectivity between channels across space and frequencies based on their position, bsr_matrix. required tail int direction of the ttest, can be set to 1, 0 or -1. required n_permutations int number of permutations computed, can be set to 50000. required alpha float threshold to consider clusters significant, can be set to 0.05 or less. required Returns: Type Description tuple F_obs, clusters, cluster_pv, H0, F_obs_plot: F_obs: statistic (F by default) observed for all variables, array of shape (n_tests,). clusters: boolean array with same shape as the input data, True values indicating locations that are part of a cluster, array. cluster_p_values: p-value for each cluster, array. H0: max cluster level stats observed under permutation, array of shape (n_permutations,). F_obs_plot: statistical values above alpha threshold, to plot significant sensors (see plot_significant_sensors function in the toolbox) array of shape (n_tests,).","title":"statscondCluster()"},{"location":"API/useful_tools/","text":"Useful tools Option Description title utils.py authors Florence Brun, Guillaume Dumas date 2020-03-18 concatenate_epochs ( epoch_S1 , epoch_S2 ) Concatenates a list of Epochs in one Epochs object. Parameters: Name Type Description Default epoch_S1 Epochs list of Epochs for participant 1 (for example the list samples different experimental realizations of the baseline condition). required epoch_S2 Epochs list of Epochs for participant 2. Epochs are MNE objects. required Returns: Type Description Epochs epoch_S1_concat, epoch_S2_concat: list of concatenate Epochs (for example one epoch with all the experimental realizations of the baseline condition) for each participant. create_epochs ( raw_S1 , raw_S2 , freq_bands ) Creates Epochs from Raws and vizualize Power Spectral Density (PSD) on average Epochs (option). Parameters: Name Type Description Default raw_S1 Raw list of Raws for participant 1 (with the different experimental realizations of a condition - for example the baseline. The length can be 1). required raw_S2 Raw list of Raws for participant 2. Raws are MNE objects: data are ndarray with shape (n_channels, n_times) and information is a dictionnary sampling parameters. required freq_bands list frequency bands-of-interest, list of tuple. required Note Plots topomaps of PSD values calculated with welch FFT for each epoch and each participant, averaged in each frequency band-of-interest. TODO: option with verbose Returns: Type Description list epoch_S1, epoch_S2: list of Epochs for each participant. generate_random_epoch ( epoch , mu = 0 , sigma = 2.0 ) Generate epochs with random data. Parameters: Name Type Description Default epoch Epochs mne.Epochs Epochs object to get epoch info structure required mu float float Mean of the normal distribution 0 sigma float float Standart deviation of the normal distribution 2.0 Returns: Type Description Epochs mne.Epochs new epoch with random data with normal distribution generate_virtual_epoch ( epoch , W , frequency_mean = 10 , frequency_std = 0.2 , noise_phase_level = 0.005 , noise_amplitude_level = 0.1 ) Generate epochs with simulated data using Kuramoto oscillators. Parameters: Name Type Description Default epoch Epochs mne.Epochs Epochs object to get epoch info structure required W ndarray np.ndarray Coupling matrix between the oscillators required frequency_mean float float Mean of the normal distribution for oscillators frequency 10 frequency_std float float Standart deviation of the normal distribution for oscillators frequency 0.2 noise_phase_level float float Amount of noise at the phase level 0.005 noise_amplitude_level float float Amount of noise at the amplitude level 0.1 Returns: Type Description Epochs mne.Epochs new epoch with simulated data merge ( epoch_S1 , epoch_S2 ) Merges Epochs from 2 participants after interpolation of bad channels. Parameters: Name Type Description Default epoch_S1 Epochs Epochs object for participant 1. required epoch_S2 Epochs Epochs object for participant 2. epoch_S1 and epoch_S2 correspond to a condition and can result from the concatenation of epochs from different experimental realizations of a condition. Epochs are MNE objects: data are stored in an array of shape (n_epochs, n_channels, n_times) and parameters information is stored in a disctionnary. required Note Bad channels labelling is removed. Note that average on reference can not be done anymore. Similarly, montage can not be set to the data and as a result topographies in MNE are not possible anymore. Use toolbox vizualisations instead. Returns: Type Description Epochs ep_hyper: Epochs object for the dyad (with merged data of the two participants). The time alignement has been done at raw data creation. normalizing ( baseline , task , type ) Computes Zscore or Logratio of a value between a 'task' condition and a baseline for example. Parameters: Name Type Description Default baseline ndarray PSD or CSD values for the 'baseline', ndarray, shape (n_epochs, n_channels, n_frequencies). required task ndarray PSD or CSD values for the 'task' conditions, ndarray, shape (n_epochs, n_channels, n_frequencies). required type str normalization choice, str 'Zscore' or 'Logratio'. required Note If normalization's type is 'Logratio', only positive values can be used as input (if it is not the case, take the absolute value). Returns: Type Description ndarray Normed_task: PSD or CSD values for the condition 'task' normed by values in a baseline and average across epochs, ndarray, shape (n_channels, n_frequencies). split ( raw_merge ) Splits merged Raw data into 2 participants Raw data. Parameters: Name Type Description Default raw_merge Raw Raw data for the dyad with data from participant 1 and data from participant 2 (channels name are defined with the suffix S1 and S2 respectively). required Note Participant's Raw data is set to the standard montage 1020 available in MNE. An average is computed to avoid reference bias (see MNE documentation about set_eeg_reference). Returns: Type Description Raw raw_1020_S1, raw_1020_S2: Raw data for each participant separately. Raws are MNE objects.","title":"Useful tools"},{"location":"API/useful_tools/#hypyp.utils","text":"Useful tools Option Description title utils.py authors Florence Brun, Guillaume Dumas date 2020-03-18","title":"hypyp.utils"},{"location":"API/useful_tools/#hypyp.utils.concatenate_epochs","text":"Concatenates a list of Epochs in one Epochs object. Parameters: Name Type Description Default epoch_S1 Epochs list of Epochs for participant 1 (for example the list samples different experimental realizations of the baseline condition). required epoch_S2 Epochs list of Epochs for participant 2. Epochs are MNE objects. required Returns: Type Description Epochs epoch_S1_concat, epoch_S2_concat: list of concatenate Epochs (for example one epoch with all the experimental realizations of the baseline condition) for each participant.","title":"concatenate_epochs()"},{"location":"API/useful_tools/#hypyp.utils.create_epochs","text":"Creates Epochs from Raws and vizualize Power Spectral Density (PSD) on average Epochs (option). Parameters: Name Type Description Default raw_S1 Raw list of Raws for participant 1 (with the different experimental realizations of a condition - for example the baseline. The length can be 1). required raw_S2 Raw list of Raws for participant 2. Raws are MNE objects: data are ndarray with shape (n_channels, n_times) and information is a dictionnary sampling parameters. required freq_bands list frequency bands-of-interest, list of tuple. required Note Plots topomaps of PSD values calculated with welch FFT for each epoch and each participant, averaged in each frequency band-of-interest.","title":"create_epochs()"},{"location":"API/useful_tools/#todo-option-with-verbose","text":"Returns: Type Description list epoch_S1, epoch_S2: list of Epochs for each participant.","title":"TODO: option with verbose"},{"location":"API/useful_tools/#hypyp.utils.generate_random_epoch","text":"Generate epochs with random data. Parameters: Name Type Description Default epoch Epochs mne.Epochs Epochs object to get epoch info structure required mu float float Mean of the normal distribution 0 sigma float float Standart deviation of the normal distribution 2.0 Returns: Type Description Epochs mne.Epochs new epoch with random data with normal distribution","title":"generate_random_epoch()"},{"location":"API/useful_tools/#hypyp.utils.generate_virtual_epoch","text":"Generate epochs with simulated data using Kuramoto oscillators. Parameters: Name Type Description Default epoch Epochs mne.Epochs Epochs object to get epoch info structure required W ndarray np.ndarray Coupling matrix between the oscillators required frequency_mean float float Mean of the normal distribution for oscillators frequency 10 frequency_std float float Standart deviation of the normal distribution for oscillators frequency 0.2 noise_phase_level float float Amount of noise at the phase level 0.005 noise_amplitude_level float float Amount of noise at the amplitude level 0.1 Returns: Type Description Epochs mne.Epochs new epoch with simulated data","title":"generate_virtual_epoch()"},{"location":"API/useful_tools/#hypyp.utils.merge","text":"Merges Epochs from 2 participants after interpolation of bad channels. Parameters: Name Type Description Default epoch_S1 Epochs Epochs object for participant 1. required epoch_S2 Epochs Epochs object for participant 2. epoch_S1 and epoch_S2 correspond to a condition and can result from the concatenation of epochs from different experimental realizations of a condition. Epochs are MNE objects: data are stored in an array of shape (n_epochs, n_channels, n_times) and parameters information is stored in a disctionnary. required Note Bad channels labelling is removed. Note that average on reference can not be done anymore. Similarly, montage can not be set to the data and as a result topographies in MNE are not possible anymore. Use toolbox vizualisations instead. Returns: Type Description Epochs ep_hyper: Epochs object for the dyad (with merged data of the two participants). The time alignement has been done at raw data creation.","title":"merge()"},{"location":"API/useful_tools/#hypyp.utils.normalizing","text":"Computes Zscore or Logratio of a value between a 'task' condition and a baseline for example. Parameters: Name Type Description Default baseline ndarray PSD or CSD values for the 'baseline', ndarray, shape (n_epochs, n_channels, n_frequencies). required task ndarray PSD or CSD values for the 'task' conditions, ndarray, shape (n_epochs, n_channels, n_frequencies). required type str normalization choice, str 'Zscore' or 'Logratio'. required Note If normalization's type is 'Logratio', only positive values can be used as input (if it is not the case, take the absolute value). Returns: Type Description ndarray Normed_task: PSD or CSD values for the condition 'task' normed by values in a baseline and average across epochs, ndarray, shape (n_channels, n_frequencies).","title":"normalizing()"},{"location":"API/useful_tools/#hypyp.utils.split","text":"Splits merged Raw data into 2 participants Raw data. Parameters: Name Type Description Default raw_merge Raw Raw data for the dyad with data from participant 1 and data from participant 2 (channels name are defined with the suffix S1 and S2 respectively). required Note Participant's Raw data is set to the standard montage 1020 available in MNE. An average is computed to avoid reference bias (see MNE documentation about set_eeg_reference). Returns: Type Description Raw raw_1020_S1, raw_1020_S2: Raw data for each participant separately. Raws are MNE objects.","title":"split()"},{"location":"API/visualisation/","text":"Basic visualization functions Option Description title viz.py authors Guillaume Dumas, Amir Djalovski, Ana\u00ebl Ayrolles, Florence Brun date 2020-03-18 get_3d_heads_inter () Returns Vertices and Faces of a 3D OBJ representing two facing heads. get_3d_heads_intra () Returns Vertices and Faces of a 3D OBJ representing two facing heads. plot_2d_topomap_inter ( ax ) Plot 2D head topomap for hyper-connectivity Parameters: Name Type Description Default ax Matplotlib axis required Returns: Type Description None plot the 2D topomap within the current axis. plot_2d_topomap_intra ( ax ) Plot 2D head topomap for intra-brain visualisation Parameters: Name Type Description Default ax Matplotlib axis required Returns: Type Description None plot the 2D topomap within the current axis. plot_3d_heads ( ax , vertices , faces ) Plot heads models in 3D. Parameters: Name Type Description Default ax Matplotlib axis created with projection='3d' required vertices arrays of shape (V, 3) 3d coordinates of the vertices required faces arrays of shape (F, 4) vertices number of face required Returns: Type Description None plot the head faces in 3D within the current axis. plot_links_2d_inter ( epo1 , epo2 , C , threshold = 'auto' , steps = 10 ) Plots hyper-connectivity in 2D. Parameters: Name Type Description Default epo1 Epochs mne.Epochs Epochs object to get channels information required epo2 Epochs mne.Epochs Epochs object to get channels information required C ndarray array, (len(loc1), len(loc2)) matrix with the values of hyper-connectivity required threshold str float | str threshold for the inter-brain links; only those above the set value will be plotted Can also be \"auto\" to use a threshold automatically calculated from your matrix as the maximum median by column + the maximum standard error by column. Note that the automatic threshold is specific to a dyad and does not allow to compare different dyads. 'auto' steps int int number of steps for the Bezier curves if <3 equivalent to ploting straight lines 10 weight numpy.float Connectivity weight to determine the thickness of the link required Returns: Type Description None plot the links in 2D within the current axis. plot_links_2d_intra ( epo1 , epo2 , C1 , C2 , threshold = 'auto' , steps = 2 ) Plots hyper-connectivity in 2D. Parameters: Name Type Description Default epo1 Epochs mne.Epochs Epochs object to get channels information required epo2 Epochs mne.Epochs Epochs object to get channels information required C1 ndarray array, (len(loc1), len(loc1)) matrix with the values of intra-brain connectivity required C2 ndarray array, (len(loc2), len(loc2)) matrix with the values of intra-brain connectivity required threshold str float | str threshold for the inter-brain links; only those above the set value will be plotted Can also be \"auto\" to use a threshold automatically calculated from your matrix as the maximum median by column + the maximum standard error by column. Note that the automatic threshold is specific to a dyad and does not allow to compare different dyads. 'auto' steps int int number of steps for the Bezier curves if <3 equivalent to ploting straight lines 2 weight numpy.float Connectivity weight to determine the thickness of the link required Returns: Type Description None plot the links in 2D within the current axis. plot_links_3d_inter ( ax , epo1 , epo2 , C , threshold = 'auto' , steps = 10 ) Plots hyper-connectivity in 3D. Parameters: Name Type Description Default ax str Matplotlib axis created with projection='3d' required loc1 arrays of shape (n_sensors, 3) 3d coordinates of the sensors required loc2 arrays of shape (n_sensors, 3) 3d coordinates of the sensors required C ndarray array, (len(loc1), len(loc2)) matrix with the values of hyper-connectivity required threshold str float | str threshold for the inter-brain links; only those above the set value will be plotted Can also be \"auto\" to use a threshold automatically calculated from your matrix as the maximum median by column + the maximum standard error by column. Note that the automatic threshold is specific to a dyad and does not allow to compare different dyads. 'auto' steps int int number of steps for the Bezier curves if <3 equivalent to ploting straight lines 10 weight numpy.float Connectivity weight to determine the thickness of the link required Returns: Type Description None plot the links in 3D within the current axis. Plot hyper-connectivity in 3D. plot_links_3d_intra ( ax , epo1 , epo2 , C1 , C2 , threshold = 'auto' , steps = 10 ) Plots hyper-connectivity in 3D. Parameters: Name Type Description Default ax str Matplotlib axis created with projection='3d' required loc1 arrays of shape (n_sensors, 3) 3d coordinates of the sensors required loc2 arrays of shape (n_sensors, 3) 3d coordinates of the sensors required C1 ndarray array, (len(loc1), len(loc1)) matrix with the values of intra-brain connectivity required C2 ndarray array, (len(loc1), len(loc2)) matrix with the values of intra-brain connectivity required threshold str float | str threshold for the inter-brain links; only those above the set value will be plotted Can also be \"auto\" to use a threshold automatically calculated from your matrix as the maximum median by column + the maximum standard error by column. Note that the automatic threshold is specific to a dyad and does not allow to compare different dyads. 'auto' steps int int number of steps for the Bezier curves if <3 equivalent to ploting straight lines 10 weight numpy.float Connectivity weight to determine the thickness of the link required Returns: Type Description None plot the links in 3D within the current axis. Plot hyper-connectivity in 3D. plot_sensors_2d_inter ( epo1 , epo2 , lab = False ) Plots sensors in 2D with x representation for bad sensors. Parameters: Name Type Description Default epo1 Epochs mne.Epochs Epochs object to get channels information required epo2 Epochs mne.Epochs Epochs object to get channels information required lab bool option to plot channel names True by default. False Returns: Type Description None plot the sensors in 2D within the current axis. plot_sensors_2d_intra ( epo1 , epo2 , lab = False ) Plots sensors in 2D with x representation for bad sensors. Parameters: Name Type Description Default epo1 Epochs mne.Epochs Epochs object to get channels information required epo2 Epochs mne.Epochs Epochs object to get channels information required lab bool option to plot channel names True by default. False Returns: Type Description None plot the sensors in 2D within the current axis. plot_sensors_3d_inter ( ax , epo1 , epo2 , lab = False ) Plots sensors in 3D with x representation for bad sensors. Parameters: Name Type Description Default ax str Matplotlib axis created with projection='3d' required epo1 Epochs mne.Epochs Epochs object to get channel information required epo2 Epochs mne.Epochs Epochs object to get channel information required lab bool option to plot channel names False by default. False Returns: Type Description None plot the sensors in 3D within the current axis. plot_sensors_3d_intra ( ax , epo1 , epo2 , lab = False ) Plots sensors in 3D with x representation for bad sensors. Parameters: Name Type Description Default ax str Matplotlib axis created with projection='3d' required epo1 Epochs mne.Epochs Epochs object to get channel information required epo2 Epochs mne.Epochs Epochs object to get channel information required lab bool option to plot channel names False by default. False Returns: Type Description None plot the sensors in 3D within the current axis. plot_significant_sensors ( T_obs_plot , epochs ) Plots the significant sensors from a statistical test (simple t test or clusters corrected t test), computed between groups or conditions on power or connectivity values, across simple participants. For statistics with inter-brain connectivity values on participant pairs (merge data), use the plot_links_3d function. Parameters: Name Type Description Default T_obs_plot ndarray statistical values to plot, from sensors above alpha threshold, array of shape (n_tests,). required epochs Epochs one participant Epochs object to sample channel information in info. required Returns: Type Description None plot topomap with the T or F statistics for significant sensors. transform ( locs , traX = 0.15 , traY = 0 , traZ = 0.5 , rotY = 1.5707963267948966 , rotZ = 1.5707963267948966 ) Calculates new locations for the EEG locations. Parameters: Name Type Description Default locs ndarray array of shape (n_sensors, 3) 3d coordinates of the sensors required traX float float X translation to apply to the sensors 0.15 traY float float Y translation to apply to the sensors 0 traZ float float Z translation to apply to the sensors 0.5 rotY float float Y rotation to apply to the sensors 1.5707963267948966 rotZ float float Z rotation to apply to the sensors 1.5707963267948966 Returns: Type Description ndarray result: array (n_sensors, 3) new 3d coordinates of the sensors transform_2d_intra ( locs , traX = 0.15 , traY = 0 , traZ = 0 , rotZ = 1.5707963267948966 ) Calculates new locations for the EEG locations. Parameters: Name Type Description Default locs ndarray array of shape (n_sensors, 3) 3d coordinates of the sensors required traX float float X translation to apply to the sensors 0.15 traY float float Y translation to apply to the sensors 0 traZ float float Z translation to apply to the sensors 0 rotZ float float Z rotation to apply to the sensors 1.5707963267948966 Returns: Type Description ndarray result: array (n_sensors, 3) new coordinates of the sensors viz_2D_headmodel_inter ( epo1 , epo2 , C , threshold = 0.95 , steps = 10 , lab = True ) Visualization of inter-brain connectivity in 2D. Parameters: Name Type Description Default epo1 Epochs mne.Epochs Epochs object to get channel information required epo2 Epochs mne.Epochs Epochs object to get channel information required C ndarray array, (len(loc1), len(loc2)) matrix with the values of hyper-connectivity required threshold float float threshold for the inter-brain links; only those above the set value will be plotted 0.95 steps int int number of steps for the Bezier curves if <3 equivalent to ploting straight lines 10 lab bool option to plot channel names True by default. True Returns: Type Description None plot headmodel with sensors and connectivity links in 2D. viz_2D_topomap_inter ( epo1 , epo2 , C , threshold = 0.95 , steps = 10 , lab = False ) Visualization of inter-brain connectivity in 2D. Parameters: Name Type Description Default epo1 Epochs mne.Epochs Epochs object to get channel information required epo2 Epochs mne.Epochs Epochs object to get channel information required C ndarray array, (len(loc1), len(loc2)) matrix with the values of hyper-connectivity required threshold float float threshold for the inter-brain links; only those above the set value will be plotted 0.95 steps int int number of steps for the Bezier curves if <3 equivalent to ploting straight lines 10 lab bool option to plot channel names False by default. False Returns: Type Description None plot head topomap with sensors and connectivity links in 2D. viz_2D_topomap_intra ( epo1 , epo2 , C1 , C2 , threshold = 0.95 , steps = 2 , lab = False ) Visualization of inter-brain connectivity in 3D. Parameters: Name Type Description Default epo1 Epochs mne.Epochs Epochs object to get channel information required epo2 Epochs mne.Epochs Epochs object to get channel information required C1 ndarray array, (len(loc1), len(loc1)) matrix with the values of intra-brain connectivity required C2 ndarray array, (len(loc2), len(loc2)) matrix with the values of intra-brain connectivity required threshold float float threshold for the inter-brain links; only those above the set value will be plotted 0.95 steps int int number of steps for the Bezier curves if <3 equivalent to ploting straight lines 2 lab bool option to plot channel names False by default. False Returns: Type Description None plot head topomap with sensors and intra-brain connectivity links in 2D. viz_3D_inter ( epo1 , epo2 , C , threshold = 0.95 , steps = 10 , lab = False ) Visualization of inter-brain connectivity in 3D. Parameters: Name Type Description Default epo1 Epochs mne.Epochs Epochs object to get channel information required epo2 Epochs mne.Epochs Epochs object to get channel information required C ndarray array, (len(loc1), len(loc2)) matrix with the values of hyper-connectivity required threshold float float threshold for the inter-brain links; only those above the set value will be plotted 0.95 steps int int number of steps for the Bezier curves if <3 equivalent to ploting straight lines 10 lab bool option to plot channel names False by default. False Returns: Type Description None plot headmodel with sensors and connectivity links in 3D. viz_3D_intra ( epo1 , epo2 , C1 , C2 , threshold = 0.95 , steps = 10 , lab = False ) Visualization of intra-brain connectivity in 3D. Parameters: Name Type Description Default epo1 Epochs mne.Epochs Epochs object to get channel information required epo2 Epochs mne.Epochs Epochs object to get channel information required C1 ndarray array, (len(loc1), len(loc1)) matrix with the values of intra-brain connectivity required C2 ndarray array, (len(loc2), len(loc2)) required threshold float float threshold for the inter-brain links; only those above the set value will be plotted 0.95 steps int int number of steps for the Bezier curves if <3 equivalent to ploting straight lines 10 lab bool option to plot channel names False by default. False Returns: Type Description None plot headmodel with sensors and connectivity links in 3D.","title":"Visualisation"},{"location":"API/visualisation/#hypyp.viz","text":"Basic visualization functions Option Description title viz.py authors Guillaume Dumas, Amir Djalovski, Ana\u00ebl Ayrolles, Florence Brun date 2020-03-18","title":"hypyp.viz"},{"location":"API/visualisation/#hypyp.viz.get_3d_heads_inter","text":"Returns Vertices and Faces of a 3D OBJ representing two facing heads.","title":"get_3d_heads_inter()"},{"location":"API/visualisation/#hypyp.viz.get_3d_heads_intra","text":"Returns Vertices and Faces of a 3D OBJ representing two facing heads.","title":"get_3d_heads_intra()"},{"location":"API/visualisation/#hypyp.viz.plot_2d_topomap_inter","text":"Plot 2D head topomap for hyper-connectivity Parameters: Name Type Description Default ax Matplotlib axis required Returns: Type Description None plot the 2D topomap within the current axis.","title":"plot_2d_topomap_inter()"},{"location":"API/visualisation/#hypyp.viz.plot_2d_topomap_intra","text":"Plot 2D head topomap for intra-brain visualisation Parameters: Name Type Description Default ax Matplotlib axis required Returns: Type Description None plot the 2D topomap within the current axis.","title":"plot_2d_topomap_intra()"},{"location":"API/visualisation/#hypyp.viz.plot_3d_heads","text":"Plot heads models in 3D. Parameters: Name Type Description Default ax Matplotlib axis created with projection='3d' required vertices arrays of shape (V, 3) 3d coordinates of the vertices required faces arrays of shape (F, 4) vertices number of face required Returns: Type Description None plot the head faces in 3D within the current axis.","title":"plot_3d_heads()"},{"location":"API/visualisation/#hypyp.viz.plot_links_2d_inter","text":"Plots hyper-connectivity in 2D. Parameters: Name Type Description Default epo1 Epochs mne.Epochs Epochs object to get channels information required epo2 Epochs mne.Epochs Epochs object to get channels information required C ndarray array, (len(loc1), len(loc2)) matrix with the values of hyper-connectivity required threshold str float | str threshold for the inter-brain links; only those above the set value will be plotted Can also be \"auto\" to use a threshold automatically calculated from your matrix as the maximum median by column + the maximum standard error by column. Note that the automatic threshold is specific to a dyad and does not allow to compare different dyads. 'auto' steps int int number of steps for the Bezier curves if <3 equivalent to ploting straight lines 10 weight numpy.float Connectivity weight to determine the thickness of the link required Returns: Type Description None plot the links in 2D within the current axis.","title":"plot_links_2d_inter()"},{"location":"API/visualisation/#hypyp.viz.plot_links_2d_intra","text":"Plots hyper-connectivity in 2D. Parameters: Name Type Description Default epo1 Epochs mne.Epochs Epochs object to get channels information required epo2 Epochs mne.Epochs Epochs object to get channels information required C1 ndarray array, (len(loc1), len(loc1)) matrix with the values of intra-brain connectivity required C2 ndarray array, (len(loc2), len(loc2)) matrix with the values of intra-brain connectivity required threshold str float | str threshold for the inter-brain links; only those above the set value will be plotted Can also be \"auto\" to use a threshold automatically calculated from your matrix as the maximum median by column + the maximum standard error by column. Note that the automatic threshold is specific to a dyad and does not allow to compare different dyads. 'auto' steps int int number of steps for the Bezier curves if <3 equivalent to ploting straight lines 2 weight numpy.float Connectivity weight to determine the thickness of the link required Returns: Type Description None plot the links in 2D within the current axis.","title":"plot_links_2d_intra()"},{"location":"API/visualisation/#hypyp.viz.plot_links_3d_inter","text":"Plots hyper-connectivity in 3D. Parameters: Name Type Description Default ax str Matplotlib axis created with projection='3d' required loc1 arrays of shape (n_sensors, 3) 3d coordinates of the sensors required loc2 arrays of shape (n_sensors, 3) 3d coordinates of the sensors required C ndarray array, (len(loc1), len(loc2)) matrix with the values of hyper-connectivity required threshold str float | str threshold for the inter-brain links; only those above the set value will be plotted Can also be \"auto\" to use a threshold automatically calculated from your matrix as the maximum median by column + the maximum standard error by column. Note that the automatic threshold is specific to a dyad and does not allow to compare different dyads. 'auto' steps int int number of steps for the Bezier curves if <3 equivalent to ploting straight lines 10 weight numpy.float Connectivity weight to determine the thickness of the link required Returns: Type Description None plot the links in 3D within the current axis. Plot hyper-connectivity in 3D.","title":"plot_links_3d_inter()"},{"location":"API/visualisation/#hypyp.viz.plot_links_3d_intra","text":"Plots hyper-connectivity in 3D. Parameters: Name Type Description Default ax str Matplotlib axis created with projection='3d' required loc1 arrays of shape (n_sensors, 3) 3d coordinates of the sensors required loc2 arrays of shape (n_sensors, 3) 3d coordinates of the sensors required C1 ndarray array, (len(loc1), len(loc1)) matrix with the values of intra-brain connectivity required C2 ndarray array, (len(loc1), len(loc2)) matrix with the values of intra-brain connectivity required threshold str float | str threshold for the inter-brain links; only those above the set value will be plotted Can also be \"auto\" to use a threshold automatically calculated from your matrix as the maximum median by column + the maximum standard error by column. Note that the automatic threshold is specific to a dyad and does not allow to compare different dyads. 'auto' steps int int number of steps for the Bezier curves if <3 equivalent to ploting straight lines 10 weight numpy.float Connectivity weight to determine the thickness of the link required Returns: Type Description None plot the links in 3D within the current axis. Plot hyper-connectivity in 3D.","title":"plot_links_3d_intra()"},{"location":"API/visualisation/#hypyp.viz.plot_sensors_2d_inter","text":"Plots sensors in 2D with x representation for bad sensors. Parameters: Name Type Description Default epo1 Epochs mne.Epochs Epochs object to get channels information required epo2 Epochs mne.Epochs Epochs object to get channels information required lab bool option to plot channel names True by default. False Returns: Type Description None plot the sensors in 2D within the current axis.","title":"plot_sensors_2d_inter()"},{"location":"API/visualisation/#hypyp.viz.plot_sensors_2d_intra","text":"Plots sensors in 2D with x representation for bad sensors. Parameters: Name Type Description Default epo1 Epochs mne.Epochs Epochs object to get channels information required epo2 Epochs mne.Epochs Epochs object to get channels information required lab bool option to plot channel names True by default. False Returns: Type Description None plot the sensors in 2D within the current axis.","title":"plot_sensors_2d_intra()"},{"location":"API/visualisation/#hypyp.viz.plot_sensors_3d_inter","text":"Plots sensors in 3D with x representation for bad sensors. Parameters: Name Type Description Default ax str Matplotlib axis created with projection='3d' required epo1 Epochs mne.Epochs Epochs object to get channel information required epo2 Epochs mne.Epochs Epochs object to get channel information required lab bool option to plot channel names False by default. False Returns: Type Description None plot the sensors in 3D within the current axis.","title":"plot_sensors_3d_inter()"},{"location":"API/visualisation/#hypyp.viz.plot_sensors_3d_intra","text":"Plots sensors in 3D with x representation for bad sensors. Parameters: Name Type Description Default ax str Matplotlib axis created with projection='3d' required epo1 Epochs mne.Epochs Epochs object to get channel information required epo2 Epochs mne.Epochs Epochs object to get channel information required lab bool option to plot channel names False by default. False Returns: Type Description None plot the sensors in 3D within the current axis.","title":"plot_sensors_3d_intra()"},{"location":"API/visualisation/#hypyp.viz.plot_significant_sensors","text":"Plots the significant sensors from a statistical test (simple t test or clusters corrected t test), computed between groups or conditions on power or connectivity values, across simple participants. For statistics with inter-brain connectivity values on participant pairs (merge data), use the plot_links_3d function. Parameters: Name Type Description Default T_obs_plot ndarray statistical values to plot, from sensors above alpha threshold, array of shape (n_tests,). required epochs Epochs one participant Epochs object to sample channel information in info. required Returns: Type Description None plot topomap with the T or F statistics for significant sensors.","title":"plot_significant_sensors()"},{"location":"API/visualisation/#hypyp.viz.transform","text":"Calculates new locations for the EEG locations. Parameters: Name Type Description Default locs ndarray array of shape (n_sensors, 3) 3d coordinates of the sensors required traX float float X translation to apply to the sensors 0.15 traY float float Y translation to apply to the sensors 0 traZ float float Z translation to apply to the sensors 0.5 rotY float float Y rotation to apply to the sensors 1.5707963267948966 rotZ float float Z rotation to apply to the sensors 1.5707963267948966 Returns: Type Description ndarray result: array (n_sensors, 3) new 3d coordinates of the sensors","title":"transform()"},{"location":"API/visualisation/#hypyp.viz.transform_2d_intra","text":"Calculates new locations for the EEG locations. Parameters: Name Type Description Default locs ndarray array of shape (n_sensors, 3) 3d coordinates of the sensors required traX float float X translation to apply to the sensors 0.15 traY float float Y translation to apply to the sensors 0 traZ float float Z translation to apply to the sensors 0 rotZ float float Z rotation to apply to the sensors 1.5707963267948966 Returns: Type Description ndarray result: array (n_sensors, 3) new coordinates of the sensors","title":"transform_2d_intra()"},{"location":"API/visualisation/#hypyp.viz.viz_2D_headmodel_inter","text":"Visualization of inter-brain connectivity in 2D. Parameters: Name Type Description Default epo1 Epochs mne.Epochs Epochs object to get channel information required epo2 Epochs mne.Epochs Epochs object to get channel information required C ndarray array, (len(loc1), len(loc2)) matrix with the values of hyper-connectivity required threshold float float threshold for the inter-brain links; only those above the set value will be plotted 0.95 steps int int number of steps for the Bezier curves if <3 equivalent to ploting straight lines 10 lab bool option to plot channel names True by default. True Returns: Type Description None plot headmodel with sensors and connectivity links in 2D.","title":"viz_2D_headmodel_inter()"},{"location":"API/visualisation/#hypyp.viz.viz_2D_topomap_inter","text":"Visualization of inter-brain connectivity in 2D. Parameters: Name Type Description Default epo1 Epochs mne.Epochs Epochs object to get channel information required epo2 Epochs mne.Epochs Epochs object to get channel information required C ndarray array, (len(loc1), len(loc2)) matrix with the values of hyper-connectivity required threshold float float threshold for the inter-brain links; only those above the set value will be plotted 0.95 steps int int number of steps for the Bezier curves if <3 equivalent to ploting straight lines 10 lab bool option to plot channel names False by default. False Returns: Type Description None plot head topomap with sensors and connectivity links in 2D.","title":"viz_2D_topomap_inter()"},{"location":"API/visualisation/#hypyp.viz.viz_2D_topomap_intra","text":"Visualization of inter-brain connectivity in 3D. Parameters: Name Type Description Default epo1 Epochs mne.Epochs Epochs object to get channel information required epo2 Epochs mne.Epochs Epochs object to get channel information required C1 ndarray array, (len(loc1), len(loc1)) matrix with the values of intra-brain connectivity required C2 ndarray array, (len(loc2), len(loc2)) matrix with the values of intra-brain connectivity required threshold float float threshold for the inter-brain links; only those above the set value will be plotted 0.95 steps int int number of steps for the Bezier curves if <3 equivalent to ploting straight lines 2 lab bool option to plot channel names False by default. False Returns: Type Description None plot head topomap with sensors and intra-brain connectivity links in 2D.","title":"viz_2D_topomap_intra()"},{"location":"API/visualisation/#hypyp.viz.viz_3D_inter","text":"Visualization of inter-brain connectivity in 3D. Parameters: Name Type Description Default epo1 Epochs mne.Epochs Epochs object to get channel information required epo2 Epochs mne.Epochs Epochs object to get channel information required C ndarray array, (len(loc1), len(loc2)) matrix with the values of hyper-connectivity required threshold float float threshold for the inter-brain links; only those above the set value will be plotted 0.95 steps int int number of steps for the Bezier curves if <3 equivalent to ploting straight lines 10 lab bool option to plot channel names False by default. False Returns: Type Description None plot headmodel with sensors and connectivity links in 3D.","title":"viz_3D_inter()"},{"location":"API/visualisation/#hypyp.viz.viz_3D_intra","text":"Visualization of intra-brain connectivity in 3D. Parameters: Name Type Description Default epo1 Epochs mne.Epochs Epochs object to get channel information required epo2 Epochs mne.Epochs Epochs object to get channel information required C1 ndarray array, (len(loc1), len(loc1)) matrix with the values of intra-brain connectivity required C2 ndarray array, (len(loc2), len(loc2)) required threshold float float threshold for the inter-brain links; only those above the set value will be plotted 0.95 steps int int number of steps for the Bezier curves if <3 equivalent to ploting straight lines 10 lab bool option to plot channel names False by default. False Returns: Type Description None plot headmodel with sensors and connectivity links in 3D.","title":"viz_3D_intra()"}]}